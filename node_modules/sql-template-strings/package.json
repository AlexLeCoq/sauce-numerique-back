{
  "_args": [
    [
      {
        "raw": "sql-template-strings@^2.2.2",
        "scope": null,
        "escapedName": "sql-template-strings",
        "name": "sql-template-strings",
        "rawSpec": "^2.2.2",
        "spec": ">=2.2.2 <3.0.0",
        "type": "range"
      },
      "/Users/gabrielarck/Desktop/serveur/sauce-numerique"
    ]
  ],
  "_from": "sql-template-strings@>=2.2.2 <3.0.0",
  "_id": "sql-template-strings@2.2.2",
  "_inCache": true,
  "_location": "/sql-template-strings",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/sql-template-strings-2.2.2.tgz_1474078020673_0.5804856750182807"
  },
  "_npmUser": {
    "name": "felixfbecker",
    "email": "felix.b@outlook.com"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sql-template-strings@^2.2.2",
    "scope": null,
    "escapedName": "sql-template-strings",
    "name": "sql-template-strings",
    "rawSpec": "^2.2.2",
    "spec": ">=2.2.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sql-template-strings/-/sql-template-strings-2.2.2.tgz",
  "_shasum": "3f11508a25addfce217a3042a9d300c3193b96ff",
  "_shrinkwrap": null,
  "_spec": "sql-template-strings@^2.2.2",
  "_where": "/Users/gabrielarck/Desktop/serveur/sauce-numerique",
  "author": {
    "name": "Felix Becker"
  },
  "bugs": {
    "url": "https://github.com/felixfbecker/node-sql-template-strings/issues"
  },
  "dependencies": {},
  "description": "ES6 tagged template strings for prepared statements with mysql and postgres",
  "devDependencies": {
    "eslint": "^3.4.0",
    "mocha": "^3.0.2",
    "nyc": "^8.1.0",
    "typedoc": "^0.4.4"
  },
  "directories": {},
  "dist": {
    "shasum": "3f11508a25addfce217a3042a9d300c3193b96ff",
    "tarball": "https://registry.npmjs.org/sql-template-strings/-/sql-template-strings-2.2.2.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "84ff820160e6d8b1a06d1e7c408a79b3843e5493",
  "homepage": "https://github.com/felixfbecker/node-sql-template-strings#readme",
  "keywords": [
    "mysql",
    "mysql2",
    "postgres",
    "pg",
    "prepared",
    "statements",
    "placeholder",
    "es6",
    "tagged",
    "template",
    "strings"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "felixfbecker",
      "email": "felix.b@outlook.com"
    }
  ],
  "name": "sql-template-strings",
  "nyc": {
    "include": [
      "index.js"
    ],
    "exclude": [
      "test/**/*.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "# SQL Template Strings\n\n[![Version](https://img.shields.io/npm/v/sql-template-strings.svg?maxAge=2592000)](https://www.npmjs.com/package/sql-template-strings)\n[![Downloads](https://img.shields.io/npm/dm/sql-template-strings.svg?maxAge=2592000)](https://www.npmjs.com/package/sql-template-strings)\n[![Build Status](https://travis-ci.org/felixfbecker/node-sql-template-strings.svg?branch=master)](https://travis-ci.org/felixfbecker/node-sql-template-strings)\n[![Coverage](https://codecov.io/gh/felixfbecker/node-sql-template-strings/branch/master/graph/badge.svg)](https://codecov.io/gh/felixfbecker/node-sql-template-strings)\n![Dependencies](https://david-dm.org/felixfbecker/node-sql-template-strings.svg)\n![Node Version](http://img.shields.io/node/v/sql-template-strings.svg)\n[![License](https://img.shields.io/npm/l/sql-template-strings.svg?maxAge=2592000)](https://github.com/felixfbecker/node-sql-template-strings/blob/master/LICENSE.md)\n[![Chat](https://badges.gitter.im/felixfbecker/node-sql-template-strings.svg)](https://gitter.im/felixfbecker/node-sql-template-strings?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[API Documentation](http://node-sql-template-strings.surge.sh/)\n\nA simple yet powerful module to allow you to use ES6 tagged template strings for prepared/escaped statements.  \nWorks with [mysql](https://www.npmjs.com/package/mysql), [mysql2](https://www.npmjs.com/package/mysql2), [postgres](https://www.npmjs.com/package/pg) and [sequelize](https://www.npmjs.com/package/sequelize).\n\nExample for escaping queries (callbacks omitted):\n\n```js\nconst SQL = require('sql-template-strings')\n\nconst book = 'harry potter'\nconst author = 'J. K. Rowling'\n\n// mysql:\nmysql.query('SELECT author FROM books WHERE name = ? AND author = ?', [book, author])\n// is equivalent to\nmysql.query(SQL`SELECT author FROM books WHERE name = ${book} AND author = ${author}`)\n\n// postgres:\npg.query('SELECT author FROM books WHERE name = $1 AND author = $2', [book, author])\n// is equivalent to\npg.query(SQL`SELECT author FROM books WHERE name = ${book} AND author = ${author}`)\n\n// sequelize:\nsequelize.query('SELECT author FROM books WHERE name = ? AND author = ?', {replacements: [book, author]})\n// is equivalent to\nsequelize.query(SQL`SELECT author FROM books WHERE name = ${book} AND author = ${author}`)\n```\nThis might not seem like a big deal, but when you do an INSERT with a lot columns writing all the placeholders becomes a nightmare:\n\n```js\ndb.query(\n  'INSERT INTO books (name, author, isbn, category, recommended_age, pages, price) VALUES (?, ?, ?, ?, ?, ?, ?)',\n  [name, author, isbn, category, recommendedAge, pages, price]\n)\n// is better written as\ndb.query(SQL`\n  INSERT\n  INTO    books\n          (name, author, isbn, category, recommended_age, pages, price)\n  VALUES  (${name}, ${author}, ${isbn}, ${category}, ${recommendedAge}, ${pages}, ${price})\n`)\n```\nAlso template strings support line breaks, while normal strings do not.\n\n## How it works\nThe SQL template string tag transforms the template string and returns an _object_ that is understood by both mysql and postgres:\n\n```js\nconst query = SQL`SELECT author FROM books WHERE name = ${book} AND author = ${author}`\ntypeof query // => 'object'\nquery.text   // => 'SELECT author FROM books WHERE name = $1 AND author = $2'\nquery.sql    // => 'SELECT author FROM books WHERE name = ? AND author = ?'\nquery.values // => ['harry potter', 'J. K. Rowling']\n```\n\n## Building complex queries with `append()`\nIt is also possible to build queries by appending another query or a string with the `append()` method (returns `this` for chaining):\n\n```js\nquery.append(SQL`AND genre = ${genre}`).append(' ORDER BY rating')\nquery.text   // => 'SELECT author FROM books WHERE name = $1 AND author = $2 AND genre = $3 ORDER BY rating'\nquery.sql    // => 'SELECT author FROM books WHERE name = ? AND author = ? AND genre = ? ORDER BY rating'\nquery.values // => ['harry potter', 'J. K. Rowling', 'Fantasy'] ORDER BY rating\n```\n\nThis allows you to build complex queries without having to care about the placeholder index or the values array:\n\n```js\nconst query = SQL`SELECT * FROM books`\nif (params.name) {\n  query.append(SQL` WHERE name = ${params.name}`)\n}\nquery.append(SQL` LIMIT 10 OFFSET ${params.offset || 0}`)\n```\n\n## Raw values\nSome values cannot be replaced by placeholders in prepared statements, like table names.\n`append()` replaces the `SQL.raw()` syntax from version 1, just pass a string and it will get appended raw.\n\n > Please note that when inserting raw values, you are responsible for quoting and escaping these values with proper escaping functions first if they come from user input (E.g. `mysql.escapeId()` and `pg.escapeIdentifier()`).\n > Also, executing many prepared statements with changing raw values in a loop will quickly overflow the prepared statement buffer (and destroy their performance benefit), so be careful.\n\n```js\nconst table = 'books'\nconst order = 'DESC'\nconst column = 'author'\n\ndb.query(SQL`SELECT * FROM \"`.append(table).append(SQL`\" WHERE author = ${author} ORDER BY ${column} `).append(order))\n\n// escape user input manually\nmysql.query(SQL`SELECT * FROM `.append(mysql.escapeId(someUserInput)).append(SQL` WHERE name = ${book} ORDER BY ${column} `).append(order))\npg.query(SQL`SELECT * FROM `.append(pg.escapeIdentifier(someUserInput)).append(SQL` WHERE name = ${book} ORDER BY ${column} `).append(order)))\n```\n\n## Prepared Statements in Postgres\nPostgres requires prepared statements to be named, otherwise the parameters will be escaped and replaced on the client side.\nYou can set the name with the `setName()` method:\n\n```js\n// old way\npg.query({name: 'my_query', text: 'SELECT author FROM books WHERE name = $1', values: [book]})\n\n// with template strings\npg.query(SQL`SELECT author FROM books WHERE name = ${book}`.setName('my_query'))\n```\nYou can also set the name property on the statement object directly or use `Object.assign()`.\n\n## Bound Statements in sequelize\nBy default, Sequelize will escape replacements on the client.\nTo switch to using a bound statement in Sequelize, call `useBind()`.\nThe boolean parameter defaults to `true`.\nLike all methods, returns `this` for chaining.\nPlease note that as long as the bound mode is active, the statement object only supports Sequelize, not the other drivers.\n\n```js\n// old way\nsequelize.query('SELECT author FROM books WHERE name = ? AND author = ?', {bind: [book, author]})\n\n// with template strings\nsequelize.query(SQL`SELECT author FROM books WHERE name = ${book}`.useBind(true))\nsequelize.query(SQL`SELECT author FROM books WHERE name = ${book}`.useBind()) // the same\n\n// works with append (you can call useBind at any time)\nconst query = SQL`SELECT * FROM books`.useBind(true)\nif (params.name) {\n  query.append(SQL` WHERE name = ${params.name}`)\n}\nquery.append(SQL` LIMIT 10 OFFSET ${params.offset || 0}`)\n```\n\n## Contributing\n - Tests are written using [mocha](https://www.npmjs.com/package/mocha)\n - You can use `npm test` to run the tests and check coding style\n - Since this module is only compatible with ES6 versions of node anyway, use all the ES6 goodies\n - Pull requests are welcome :)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/felixfbecker/node-sql-template-strings.git"
  },
  "scripts": {
    "cover": "nyc --all mocha test",
    "lint": "eslint index.js test",
    "test": "mocha test",
    "typedoc": "typedoc --module es2015 --target es2015 --includeDeclarations --mode file --readme none --out typedoc index.d.ts"
  },
  "typings": "index.d.ts",
  "version": "2.2.2"
}
